<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>BeatBuddy</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
    <style>
        .user-photo {
            object-fit: cover;
            border: 2px solid #32CD32;
            border-radius: 50%;
            cursor: pointer; /* Indica que é clicável */
        }
        /* Estilos para o Modal */
        .modal-user-photo {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border: 3px solid #32CD32;
            border-radius: 50%;
            display: block;
            margin: 0 auto 20px auto;
        }
        .modal-user-name {
            text-align: center;
            font-size: 2rem;
            margin-bottom: 20px;
        }
        .artist-list {
            list-style-type: none;
            padding-left: 0;
        }
        .artist-list li {
            margin-bottom: 10px;
        }
        .artist-stage {
            margin-left: 20px;
        }
        /* Adicionando espaçamento no Modal */
        .modal-body {
            padding-top: 20px;
        }
    </style>
    <!-- Socket.io Client -->
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>

    <nav class="navbar navbar-dark bg-dark mb-4">
        <div class="container-fluid d-flex justify-content-between">
            <!-- Span para exibir Dia da Semana e Hora Atual -->
            <span id="current-datetime" class="datetime">Carregando...</span>
            
            <% if (user) { %>
                <span class="navbar-text">
                    <%= user.name %> | <a href="/logout" class="text-light">Logout</a>
                </span>
            <% } else { %>
                <span class="navbar-text">
                    <a href="/login" class="text-light">Login</a>
                </span>
            <% } %>
        </div>
    </nav>

    <div class="container">
        <!-- Descrição do Projeto -->
        <div class="mb-5">
            <h1 class="text-center">BeatBuddy</h1>
            <p class="text-center">
                Lineup Interativa - Tomorrowland Brasil 2024
            </p>
        </div>

        <!-- Botões de Seleção de Dia -->
        <div class="d-flex justify-content-center mb-5">
            <% const daysOrder = ["Sexta-feira", "Sábado", "Domingo"]; %>
            <% daysOrder.forEach(day => { %>
                <button class="btn btn-day <%= day === 'Sexta-feira' ? 'active' : '' %>" data-day="<%= day %>"><%= day %></button>
            <% }); %>
        </div>

        <!-- Conteúdo da Agenda -->
        <div id="schedule-content">
            <% daysOrder.forEach(day => { %>
                <div id="<%= day.replace(' ', '-').toLowerCase() %>" class="day-section <%= day !== 'Sexta-feira' ? 'd-none' : '' %>">
                    <% if(schedule[day]) { %>
                        <div class="accordion" id="artistsAccordion-<%= day.replace(' ', '-').toLowerCase() %>">
                            <% for(const stage in schedule[day]) { %>
                                <% 
                                    // Mapeamento das classes de palco
                                    let stageClass = '';
                                    switch(stage.toUpperCase()) {
                                        case 'MAINSTAGE':
                                            stageClass = 'stage-main';
                                            break;
                                        case 'CORE':
                                            stageClass = 'stage-core';
                                            break;
                                        case 'YOUPHORIA':
                                            stageClass = 'stage-youphoria';
                                            break;
                                        case 'TULIP':
                                            stageClass = 'stage-tulip';
                                            break;
                                        case 'FREEDOM':
                                            stageClass = 'stage-freedom';
                                            break;
                                        default:
                                            stageClass = '';
                                    }
                                %>
                                <div class="accordion-item <%= stageClass %>">
                                    <h2 class="accordion-header" id="heading-<%= stage.replace(/ /g, '-') %>">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-<%= stage.replace(/ /g, '-') %>" aria-expanded="false" aria-controls="collapse-<%= stage.replace(/ /g, '-') %>">
                                            <%= stage %>
                                        </button>
                                    </h2>
                                    <div id="collapse-<%= stage.replace(/ /g, '-') %>" class="accordion-collapse collapse" aria-labelledby="heading-<%= stage.replace(/ /g, '-') %>" data-bs-parent="#artistsAccordion-<%= day.replace(' ', '-').toLowerCase() %>">
                                        <div class="accordion-body">
                                            <ul class="list-group">
                                                <% schedule[day][stage].forEach(artistObj => { 
                                                    const artistName = Object.keys(artistObj)[0];
                                                    const time = artistObj[artistName];
                                                    const isSelected = user && selections[artistName] && selections[artistName].users.find(u => u.id === user.id);
                                                %>
                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <strong><%= artistName %></strong><br>
                                                            <small class="time"><%= time %></small><br>
                                                            <% if(selections[artistName] && selections[artistName].count > 0) { %>
                                                                <div class="mt-2 d-flex flex-wrap user-list" data-artist="<%= artistName %>">
                                                                    <% selections[artistName].users.forEach(u => { %>
                                                                        <img src="<%= u.photo_url %>" alt="<%= u.name %>" class="user-photo me-2 mb-2" width="40" height="40" data-user-id="<%= u.id %>">
                                                                    <% }); %>
                                                                </div>
                                                            <% } %>
                                                        </div>
                                                        <% if(user) { %>
                                                            <button class="btn btn-sm <%= isSelected ? 'btn-danger deselect-btn' : 'btn-primary select-btn' %>" data-artist="<%= artistName %>">
                                                                <%= isSelected ? 'Não vou mais' : 'Vou certo' %>
                                                            </button>
                                                        <% } %>
                                                    </li>
                                                <% }); %>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    <% } else { %>
                        <p>Nenhum artista programado para este dia.</p>
                    <% } %>
                </div>
            <% }); %>
        </div>
    </div>

    <!-- Modal para Mostrar Perfil do Usuário -->
    <div class="modal fade" id="userProfileModal" tabindex="-1" aria-labelledby="userProfileModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content bg-dark text-light">
          <div class="modal-header border-0">
            <h5 class="modal-title" id="userProfileModalLabel">Perfil do Usuário</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
          </div>
          <div class="modal-body">
            <img src="" alt="Foto do Usuário" class="modal-user-photo">
            <h2 class="modal-user-name"></h2>
            <h4>Artistas Confirmados:</h4>
            <ul class="artist-list" id="artist-list">
                <!-- Lista de artistas será inserida aqui via JavaScript -->
            </ul>
          </div>
          <div class="modal-footer border-0">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Rodapé com Informações do Criador -->
    <footer class="bg-dark text-center text-lg-start mt-5">
      <div class="text-center p-3" style="color: #e0e0e0;">
        Criado por <a href="https://vandervieira.com.br" class="text-light">Vander Vieira</a>
      </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Inicializar Socket.io
        const socket = io();

        // Função para atualizar a data e hora
        function updateDateTime() {
            const datetimeSpan = document.getElementById('current-datetime');
            const now = new Date();

            // Opções para configurar a data e hora no formato desejado
            const options = {
                weekday: 'short', // Dia da semana abreviado (e.g., "Sex")
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
                timeZone: 'America/Sao_Paulo' // Define o fuso horário para BRT
            };

            const formatter = new Intl.DateTimeFormat('pt-BR', options);
            const formattedDateTime = formatter.format(now).replace(',', '');

            datetimeSpan.textContent = formattedDateTime;
        }

        // Atualiza a data e hora imediatamente ao carregar a página
        updateDateTime();

        // Atualiza a data e hora a cada minuto
        setInterval(updateDateTime, 60000);

        // Botões de Seleção de Dia
        const dayButtons = document.querySelectorAll('.btn-day');
        const days = ["Sexta-feira", "Sábado", "Domingo"];

        dayButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Remover 'active' de todos os botões e adicionar ao clicado
                dayButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                // Ocultar todas as seções de dia e mostrar a selecionada
                days.forEach(day => {
                    document.getElementById(day.replace(' ', '-').toLowerCase()).classList.add('d-none');
                });
                const selectedDay = button.getAttribute('data-day').replace(' ', '-').toLowerCase();
                document.getElementById(selectedDay).classList.remove('d-none');
            });
        });

        // Inicializar o modal uma única vez
        const userProfileModalElement = document.getElementById('userProfileModal');
        const userProfileModal = new bootstrap.Modal(userProfileModalElement);

        <% if (user) { %>
            // Funcionalidade de Seleção e Deseleção de Artistas
            document.querySelectorAll('.select-btn, .deselect-btn').forEach(button => {
                button.addEventListener('click', async () => {
                    const artist = button.getAttribute('data-artist');
                    const isSelected = button.classList.contains('deselect-btn');

                    try {
                        const response = await axios.post('/select-artists', { artists: artist });
                        if(response.data.success){
                            // Atualizar o estado do botão
                            if(isSelected){
                                button.textContent = 'Vou certo';
                                button.classList.remove('btn-danger', 'deselect-btn');
                                button.classList.add('btn-primary', 'select-btn');
                            } else {
                                button.textContent = 'Não vou mais';
                                button.classList.remove('btn-primary', 'select-btn');
                                button.classList.add('btn-danger', 'deselect-btn');
                            }
                        } else {
                            console.error(response.data.message);
                        }
                    } catch (error) {
                        console.error(error);
                    }
                });
            });

            // Função para atualizar a lista de usuários via AJAX
            async function updateUserList(artist) {
                try {
                    const response = await axios.get(`/artist-users?artist=${encodeURIComponent(artist)}`);
                    if(response.data.success){
                        const users = response.data.users;
                        const userListDiv = document.querySelector(`.user-list[data-artist="${artist}"]`);
                        if(userListDiv){
                            userListDiv.innerHTML = ''; // Limpar conteúdo anterior
                            users.forEach(u => {
                                const img = document.createElement('img');
                                img.src = u.photo_url || '/default-user.png';
                                img.alt = u.name;
                                img.classList.add('user-photo', 'me-2', 'mb-2');
                                img.width = 40;
                                img.height = 40;
                                img.setAttribute('data-user-id', u.id);
                                img.addEventListener('click', () => {
                                    showUserProfile(u.id);
                                });
                                userListDiv.appendChild(img);
                            });
                        }
                    }
                } catch (error) {
                    console.error(error);
                }
            }

            // Funcão para mostrar perfil do usuário no modal
            async function showUserProfile(userId) {
                try {
                    const response = await axios.get(`/user-profile/${userId}`);
                    if(response.data.success){
                        const user = response.data.user;
                        const selectedArtists = response.data.selectedArtists;

                        // Atualizar a foto do usuário
                        const modalPhoto = document.querySelector('.modal-user-photo');
                        modalPhoto.src = user.photo_url || '/default-user.png'; // Use uma imagem padrão se não houver photo_url

                        // Atualizar o nome do usuário
                        const modalName = document.querySelector('.modal-user-name');
                        modalName.textContent = user.name;

                        // Limpar a lista de artistas
                        const artistList = document.getElementById('artist-list');
                        artistList.innerHTML = ''; // Limpar conteúdo anterior

                        // Organizar os artistas por dia e palco
                        Object.keys(selectedArtists).forEach(day => {
                            const dayItem = document.createElement('li');
                            dayItem.innerHTML = `<strong>${day}:</strong>`;
                            const stages = selectedArtists[day];

                            Object.keys(stages).forEach(stage => {
                                const stageItem = document.createElement('li');
                                stageItem.classList.add('artist-stage');
                                stageItem.innerHTML = `<em>${stage}:</em> ${stages[stage].join(', ')}`;
                                dayItem.appendChild(stageItem);
                            });

                            artistList.appendChild(dayItem);
                        });

                        // Mostrar o modal
                        userProfileModal.show();
                    } else {
                        console.error('Erro ao recuperar perfil do usuário.');
                    }
                } catch (error) {
                    console.error(error);
                }
            }

            // Adicionar Event Listeners nas Imagens de Usuário
            document.querySelectorAll('.user-photo').forEach(img => {
                img.addEventListener('click', () => {
                    const userId = img.getAttribute('data-user-id');
                    if(userId){
                        showUserProfile(userId);
                    }
                });
            });

            // Adicionar Event Listeners nos Novos Ícones Após Atualizar a Lista
            // (Caso seleções sejam feitas após a página carregar)
            document.addEventListener('click', function(event) {
                if(event.target && event.target.matches('.user-photo')){
                    const userId = event.target.getAttribute('data-user-id');
                    if(userId){
                        showUserProfile(userId);
                    }
                }
            });

            // Escutar eventos do Socket.io para atualizações de seleção
            socket.on('artistSelected', ({ artist, user }) => {
                const artistSection = document.querySelector(`.user-list[data-artist="${artist}"]`);
                if(artistSection){
                    // Verificar se o usuário já está listado
                    const existingImg = artistSection.querySelector(`img[data-user-id="${user.id}"]`);
                    if(!existingImg){
                        const img = document.createElement('img');
                        img.src = user.photo_url || '/default-user.png';
                        img.alt = user.name;
                        img.classList.add('user-photo', 'me-2', 'mb-2');
                        img.width = 40;
                        img.height = 40;
                        img.setAttribute('data-user-id', user.id);
                        img.addEventListener('click', () => {
                            showUserProfile(user.id);
                        });
                        artistSection.appendChild(img);
                    }
                }
            });

            socket.on('artistDeselected', ({ artist, user }) => {
                const artistSection = document.querySelector(`.user-list[data-artist="${artist}"]`);
                if(artistSection){
                    const imgs = artistSection.querySelectorAll(`img[data-user-id="${user.id}"]`);
                    imgs.forEach(img => img.remove());
                }
            });
        <% } else { %>
            // Função para mostrar perfil do usuário no modal (sem autenticação)
            async function showUserProfile(userId) {
                try {
                    const response = await axios.get(`/user-profile/${userId}`);
                    if(response.data.success){
                        const user = response.data.user;
                        const selectedArtists = response.data.selectedArtists;

                        // Atualizar a foto do usuário
                        const modalPhoto = document.querySelector('.modal-user-photo');
                        modalPhoto.src = user.photo_url || '/default-user.png'; // Use uma imagem padrão se não houver photo_url

                        // Atualizar o nome do usuário
                        const modalName = document.querySelector('.modal-user-name');
                        modalName.textContent = user.name;

                        // Limpar a lista de artistas
                        const artistList = document.getElementById('artist-list');
                        artistList.innerHTML = ''; // Limpar conteúdo anterior

                        // Organizar os artistas por dia e palco
                        Object.keys(selectedArtists).forEach(day => {
                            const dayItem = document.createElement('li');
                            dayItem.innerHTML = `<strong>${day}:</strong>`;
                            const stages = selectedArtists[day];

                            Object.keys(stages).forEach(stage => {
                                const stageItem = document.createElement('li');
                                stageItem.classList.add('artist-stage');
                                stageItem.innerHTML = `<em>${stage}:</em> ${stages[stage].join(', ')}`;
                                dayItem.appendChild(stageItem);
                            });

                            artistList.appendChild(dayItem);
                        });

                        // Mostrar o modal
                        userProfileModal.show();
                    } else {
                        console.error('Erro ao recuperar perfil do usuário.');
                    }
                } catch (error) {
                    console.error(error);
                }
            }

            // Adicionar Event Listeners nas Imagens de Usuário (sem autenticação)
            document.querySelectorAll('.user-photo').forEach(img => {
                img.addEventListener('click', () => {
                    const userId = img.getAttribute('data-user-id');
                    if(userId){
                        showUserProfile(userId);
                    }
                });
            });

            // Adicionar Event Listeners nos Novos Ícones Após Atualizar a Lista
            // (Caso seleções sejam feitas após a página carregar)
            document.addEventListener('click', function(event) {
                if(event.target && event.target.matches('.user-photo')){
                    const userId = event.target.getAttribute('data-user-id');
                    if(userId){
                        showUserProfile(userId);
                    }
                }
            });

            // Escutar eventos do Socket.io para atualizações de seleção
            socket.on('artistSelected', ({ artist, user }) => {
                const artistSection = document.querySelector(`.user-list[data-artist="${artist}"]`);
                if(artistSection){
                    // Verificar se o usuário já está listado
                    const existingImg = artistSection.querySelector(`img[data-user-id="${user.id}"]`);
                    if(!existingImg){
                        const img = document.createElement('img');
                        img.src = user.photo_url || '/default-user.png';
                        img.alt = user.name;
                        img.classList.add('user-photo', 'me-2', 'mb-2');
                        img.width = 40;
                        img.height = 40;
                        img.setAttribute('data-user-id', user.id);
                        img.addEventListener('click', () => {
                            showUserProfile(user.id);
                        });
                        artistSection.appendChild(img);
                    }
                }
            });

            socket.on('artistDeselected', ({ artist, user }) => {
                const artistSection = document.querySelector(`.user-list[data-artist="${artist}"]`);
                if(artistSection){
                    const imgs = artistSection.querySelectorAll(`img[data-user-id="${user.id}"]`);
                    imgs.forEach(img => img.remove());
                }
            });
        <% } %>
    </script>
</body>
</html>